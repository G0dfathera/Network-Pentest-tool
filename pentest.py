import argparse
import subprocess
import sys
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

class PentestTool:
    def __init__(self):
        self.banner()
        self.parser = argparse.ArgumentParser(
            description="All-in-One Network Pentest Tool",
            usage=Fore.GREEN + "pentest.py <command> [<args>]" + Style.RESET_ALL
        )
        subparsers = self.parser.add_subparsers(dest="command")

        # Nmap command
        parser_nmap = subparsers.add_parser("nmap", help="Run Nmap scan")
        parser_nmap.add_argument("target", help="Target IP or domain")
        parser_nmap.add_argument("-p", "--ports", help="Ports to scan", default="1-65535")

        # Netcat command
        parser_netcat = subparsers.add_parser("netcat", help="Run Netcat")
        parser_netcat.add_argument("target", help="Target IP or domain")
        parser_netcat.add_argument("port", help="Port to connect/listen")
        parser_netcat.add_argument("-l", "--listen", help="Listen mode", action="store_true")

        # Ping command
        parser_ping = subparsers.add_parser("ping", help="Ping a target")
        parser_ping.add_argument("target", help="Target IP or domain")

        # DNS Lookup command
        parser_dns = subparsers.add_parser("dns_lookup", help="DNS lookup")
        parser_dns.add_argument("domain", help="Domain to lookup")

        # Whois command
        parser_whois = subparsers.add_parser("whois", help="Whois lookup")
        parser_whois.add_argument("domain", help="Domain to lookup")

        # ARP Scan command
        parser_arp = subparsers.add_parser("arp_scan", help="ARP scan")
        parser_arp.add_argument("network", help="Network to scan (e.g., 192.168.1.0/24)")

        # Parse arguments
        self.args = self.parser.parse_args()
        if not self.args.command:
            self.parser.print_help()
            sys.exit(1)

        # Execute command
        getattr(self, self.args.command)()

    def banner(self):
        print(Fore.GREEN + Style.BRIGHT + "All-in-One Network Pentest Tool")
        print(Fore.GREEN + "-"*40 + Style.RESET_ALL)

    def run_command(self, command):
        try:
            result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            print(Fore.GREEN + result.stdout.decode() + Style.RESET_ALL)
        except subprocess.CalledProcessError as e:
            print(Fore.RED + f"Error: {e.stderr.decode()}")

    def nmap(self):
        print(Fore.GREEN + f"Running Nmap scan on {self.args.target}...")
        self.run_command(f"nmap -p {self.args.ports} {self.args.target}")

    def netcat(self):
        command = f"nc {'-l' if self.args.listen else ''} {self.args.target} {self.args.port}"
        print(Fore.GREEN + f"Running Netcat with command: {command}...")
        self.run_command(command)

    def ping(self):
        print(Fore.GREEN + f"Pinging {self.args.target}...")
        self.run_command(f"ping -c 4 {self.args.target}")

    def dns_lookup(self):
        print(Fore.GREEN + f"Running DNS lookup for {self.args.domain}...")
        self.run_command(f"dig {self.args.domain}")

    def whois(self):
        print(Fore.GREEN + f"Running Whois lookup for {self.args.domain}...")
        self.run_command(f"whois {self.args.domain}")

    def arp_scan(self):
        print(Fore.GREEN + f"Running ARP scan on {self.args.network}...")
        self.run_command(f"sudo arp-scan {self.args.network}")

if __name__ == "__main__":
    PentestTool()
